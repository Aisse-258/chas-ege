Стиль написания о оформления кода на языке JavaScript в проект "Час ЕГЭ"

v1.0 (от 24.11.2014)

0. Терминология
	0.1. Стили именования
		1) PascalCase
			Пишется строчными буквами, каждое слово с большой

		2) camelCase
			Пишется строчными буквами, каждое слово, кроме первого, с большой

		3) under_score
			Пишется строчными буквами, слова разделяются подчёркиванием (_)

		4) monolower
			Пишется строчными буквами, слова не разделяются

		4) MONOUPPER
			Пишется большими буквами, слова не разделяются

		4) UPPER_UNDER_SCORE
			Пишется большими буквами, слова разделяются подчёркиванием (_)

1.Именование
	1.1. Общее:
		1) Для именования использовать under_score, если не сказано иначе
		2) Также имена длинее 16 знаков не желательны.
		3) Сокращения и аббривиатуры пишутся как обычные слова
			Пример:
				HTML -> Html (camelCase/PascalCase), html (under_score/monolower)
				SQL -> Sql (camelCase/PascalCase), sql (under_score/monolower)

	1.2. Классы, прототипы именются в PascalCase

	1.3. Функции в основе своего названия должны иметь глагол

	1.4. Пространства имён именуются в monolower

	1.5. Приватные члены (как пространств имён так и классов/прототипов) имеют приставку _

2. Оформление
	2.1. Для отсупов использовать только табуляцию

	2.2. Для выравнивания использовать только пробелы

	2.3. Максимальная длина строки - 120 знаков (допускается 128)

	2.4. Объявления:
		1) Между глобальным объявлениями (в том числе в пространстве имён) два (2) пробела
		2) Между локальным объявлениями один (1) пробел
		3) Каждое объявление на своей строке
		4) Каждой переменной по var

	2.5. Выравнивание (общее):
		1) При переносе выравнивать по началу блока
			Пример:
				function foo(first_argument, second_argument, third_argument, fourth_argument
				             fith_argument) {

		2) При переносе выражения переносить с близжайщим оператором слева
			Прим. т.к. если оставлять оператор на предыдущей строке, то можно перепутать с новым выражением

	2.6. Скобки:
		1) Фигурная скобка всегда на той же строке
		2) В вычислениях всегда ставить скобки
			Пример:
				// Вместо:
				а = 6 + 3 * 35 % Math.sqrt(16);
				// Нужно:
				a = 6 + (3 * 35 % Math.sqrt(16));

	2.7. Пробелы:
		1) Между ключевым словом / фигурной скобкой и близжайщей (-ими) скобкой (-ами) должен быть пробел
			Пример:
				if (....) {
				function foo(...)

				while (true) {
			Исключение - анонимные функции:
				function() {

		2) Вокруг всех операторов ставить пробелы
			Пример:
				a = 5;
				f = 6 * (3 % 2);

		3) Внутри скобок и между её и вызываемым пробелы не ставить
			Пример:
				x = 45 * (36 + sqrt(2)) // Правильно
				y = 45 * ( s + cos(65) ) // Не правильно

				a( 56 ) // Не правильно
				a (56) // Не правильно

	2.8. Никогда не пропускайте фигурные скобки
		Прим. Даже если очень хочется.
		Прим. Даже если никто ругать не будет.
		Прим. Даже если только вы будете поддерживать этот код.

	2.9. Для строк использовать только двойные кавычки
		Прим. Для строки в строке одинарные (если возможно):
			var html_tag = "<body onload='console.log(\"loaded\");\">"; // Возможные вариант
			var html_tag = "<body onload=\"console.log('loaded');\">"; // Не желательный

3. Прочее
	3.1. В конце каждого .js файла должна быть пустая строка

	3.2. Документируйте всё!

